# -*- coding: utf-8 -*-
"""emotion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BDjdvwgCHzufQsV7hYQS-xXod72VKuVA
"""

import zipfile
local_zip = '/content/drive/MyDrive/emotion_dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('emotion')
zip_ref.close()

"""Importing libraries

"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation
from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D,BatchNormalization,Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
import os

train_data_dir = '/content/emotion/train'
validation_data_dir = '/content/emotion/test'

names = list(os.listdir(train_data_dir+'/neutral'))
print(len(names),names,sep='\n')

# All images will be rescaled by 1./255
img_gen = ImageDataGenerator(rescale=1/255)

# Flow training images in batches of 128 using train_datagen generator
train_generator = img_gen.flow_from_directory(
        train_data_dir,  
        target_size=(48, 48), 
        color_mode='grayscale',
        batch_size=64,
        class_mode='categorical')

valid_test = img_gen.flow_from_directory(
        validation_data_dir,  
        target_size=(48, 48), 
        batch_size=64,
        color_mode='grayscale',
        class_mode='categorical')

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu', input_shape=(48,48,1)),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(128,(3,3),padding='same',activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(512,(3,3),padding='same',activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512,activation='relu'),
                                    tf.keras.layers.Dense(7,activation='softmax')
                                    ])

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

history = model.fit(
      train_generator,
      epochs=15,
      validation_data = valid_test
      )

model.summary()

pip install pyyaml h5py

model.save('mymodel.h5')

new_model = tf.keras.models.load_model('mymodel.h5')

new_model.summary()